/*
 * Copyright 2021, Brightspot.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package gyro.aws.iam;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.StringWriter;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.cert.Certificate;
import java.security.cert.CertificateEncodingException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;

import com.psddev.dari.util.ObjectUtils;
import gyro.aws.AwsResource;
import gyro.aws.Copyable;
import gyro.core.GyroException;
import gyro.core.GyroUI;
import gyro.core.Type;
import gyro.core.resource.Id;
import gyro.core.resource.Output;
import gyro.core.resource.Resource;
import gyro.core.resource.Updatable;
import gyro.core.scope.State;
import gyro.core.validation.Regex;
import gyro.core.validation.Required;
import gyro.core.validation.ValidationError;
import org.apache.commons.codec.binary.Hex;
import software.amazon.awssdk.services.iam.IamClient;
import software.amazon.awssdk.services.iam.model.CreateOpenIdConnectProviderResponse;
import software.amazon.awssdk.services.iam.model.GetOpenIdConnectProviderResponse;
import software.amazon.awssdk.services.iam.model.NoSuchEntityException;
import org.bouncycastle.openssl.jcajce.JcaPEMWriter;

/**
 * Creates an OpenId connect provider.
 *
 * Example
 * -------
 *
 * .. code-block:: gyro
 *
 *     aws::iam-openid-connect-provider provider-example
 *         client-ids : [ "sts.amazon.com" ]
 *         thumb-prints : [ "9e99a48a9960b14926cc7f3b02e22da2b0ab7280" ]
 *         url : "https://oidc.eks.us-east-2.amazonaws.com/id/50B4045A6F925CDC0F497A99C624"
 *     end
 */
@Type("iam-openid-connect-provider")
public class OpenIdConnectProviderResource extends AwsResource implements Copyable<OpenIdConnectProviderCustom> {

    private List<String> clientIds;
    private List<String> thumbPrints;
    private String url;
    private Boolean autogenThumbprint;
    private Integer autogenThumbprintCertificatePort;
    private String createdDate;
    private String arn;
    private String autoGeneratedThumbprint;
    private Map<String, String> tags;

    /**
     * A list of client id's (also knows as audiences) for the the open id connect provider.
     */
    @Required
    public List<String> getClientIds() {
        if (clientIds == null) {
            clientIds = new ArrayList<>();
        }

        return clientIds;
    }

    public void setClientIds(List<String> clientIds) {
        this.clientIds = clientIds;
    }

    /**
     * A list of server certificate thumbprints for the the open id connect provider. See `Obtaining the providers thumbprint <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc_verify-thumbprint.html>`_.
     */
    @Updatable
    public List<String> getThumbPrints() {
        if (thumbPrints == null) {
            thumbPrints = new ArrayList<>();
        }

        return thumbPrints;
    }

    public void setThumbPrints(List<String> thumbPrints) {
        this.thumbPrints = thumbPrints;
    }

    /**
     * The url for an identity provider.
     */
    @Required
    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * If set to ``true``, a thumbprint from the oidc url will be autogenerated.
     */
    public Boolean getAutogenThumbprint() {
        if (autogenThumbprint == null) {
            autogenThumbprint = false;
        }

        return autogenThumbprint;
    }

    public void setAutogenThumbprint(Boolean autogenThumbprint) {
        this.autogenThumbprint = autogenThumbprint;
    }

    /**
     * The port used to communicate to fetch the certificate for auto generating the thumbprint. Defaults to ``443``.
     */
    public Integer getAutogenThumbprintCertificatePort() {
        if (autogenThumbprintCertificatePort == null) {
            autogenThumbprintCertificatePort = 443;
        }

        return autogenThumbprintCertificatePort;
    }

    public void setAutogenThumbprintCertificatePort(Integer autogenThumbprintCertificatePort) {
        this.autogenThumbprintCertificatePort = autogenThumbprintCertificatePort;
    }

    /**
     * The creation date the open id connect provider.
     */
    @Output
    public String getCreatedDate() {
        return createdDate;
    }

    public void setCreatedDate(String createdDate) {
        this.createdDate = createdDate;
    }

    /**
     * The arn for the open id connect provider.
     */
    @Id
    @Output
    public String getArn() {
        return arn;
    }

    public void setArn(String arn) {
        this.arn = arn;
    }

    /**
     * The autogenerated thumbprint for the provided url.
     */
    @Output
    public String getAutoGeneratedThumbprint() {
        return autoGeneratedThumbprint;
    }

    public void setAutoGeneratedThumbprint(String autoGeneratedThumbprint) {
        this.autoGeneratedThumbprint = autoGeneratedThumbprint;
    }

    /**
     * The tags for the open id connect provider.
     */
    @Updatable
    public Map<String, String> getTags() {
        if (tags == null) {
            tags = new HashMap<>();
        }

        return tags;
    }

    public void setTags(Map<String, String> tags) {
        this.tags = tags;
    }

    @Override
    public boolean refresh() {
        IamClient client = createClient(IamClient.class, "aws-global", "https://iam.amazonaws.com");

        try {
            GetOpenIdConnectProviderResponse response = client.getOpenIDConnectProvider(r -> r.openIDConnectProviderArn(
                getArn()));

            copyFrom(response);

            if (!ObjectUtils.isBlank(getAutoGeneratedThumbprint())) {
                getThumbPrints().remove(getAutoGeneratedThumbprint());
            }

            return true;
        } catch (NoSuchEntityException ex) {
            // not found
        }

        return false;
    }

    @Override
    public void create(GyroUI ui, State state) throws Exception {
        IamClient client = createClient(IamClient.class, "aws-global", "https://iam.amazonaws.com");

        List<String> thumbPrints = new ArrayList<>(getThumbPrints());
        if (getAutogenThumbprint()) {
            setAutoGeneratedThumbprint(getThumbprint(getUrl().replace("https://", "").split("/")[0], getAutogenThumbprintCertificatePort()));
            thumbPrints.add(0, getAutoGeneratedThumbprint());
        }

        CreateOpenIdConnectProviderResponse response = client.createOpenIDConnectProvider(r ->
            r.clientIDList(getClientIds())
                .thumbprintList(thumbPrints)
                .url(getUrl()));

        setArn(response.openIDConnectProviderArn());

        if (!getTags().isEmpty()) {
            tagOpenIdProvider(client);
        }
    }

    @Override
    public void update(
        GyroUI ui, State state, Resource current, Set<String> changedFieldNames) throws Exception {

        IamClient client = createClient(IamClient.class, "aws-global", "https://iam.amazonaws.com");

        List<String> thumbPrints = new ArrayList<>(getThumbPrints());
        if (!ObjectUtils.isBlank(getAutoGeneratedThumbprint())) {
            thumbPrints.add(0, getAutoGeneratedThumbprint());
        }

        client.updateOpenIDConnectProviderThumbprint(r -> r.openIDConnectProviderArn(getArn()).thumbprintList(thumbPrints));
        if (changedFieldNames.contains("tags")) {
            OpenIdConnectProviderResource old = (OpenIdConnectProviderResource) current;

            if (!old.getTags().isEmpty()) {
                client.untagOpenIDConnectProvider(r -> r.openIDConnectProviderArn(getArn())
                    .tagKeys(old.getTags().keySet()));
            }

            if (getTags().isEmpty()) {
                tagOpenIdProvider(client);
            }
        }
    }

    @Override
    public void delete(GyroUI ui, State state) throws Exception {
        IamClient client = createClient(IamClient.class, "aws-global", "https://iam.amazonaws.com");

        client.deleteOpenIDConnectProvider(r -> r.openIDConnectProviderArn(getArn()));
    }

    @Override
    public void copyFrom(OpenIdConnectProviderCustom model) {
        copyFrom(model.getProvider());
        setArn(model.getArn());
    }

    public void copyFrom(GetOpenIdConnectProviderResponse model) {
        setClientIds(model.clientIDList());
        setThumbPrints(new ArrayList<>(model.thumbprintList()));
        setUrl(String.format("https://%s", model.url()));
        setCreatedDate(model.createDate().toString());
    }

    private String getThumbprint(String url, Integer port) {
        try {
            SSLSocketFactory sslsocketfactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
            SSLSocket sslsocket = (SSLSocket) sslsocketfactory.createSocket(url, port);
            sslsocket.startHandshake();
            SSLSession session = sslsocket.getSession();
            Certificate[] peerCertificates = session.getPeerCertificates();
            StringWriter writer = new StringWriter();
            JcaPEMWriter pemWriter = new JcaPEMWriter(writer);
            pemWriter.writeObject(peerCertificates[peerCertificates.length - 1]);
            pemWriter.flush();
            pemWriter.close();
            CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509");
            X509Certificate cert = (X509Certificate) certificateFactory.generateCertificate(new ByteArrayInputStream(
                writer.toString().getBytes()));
            return getThumbprint(cert);
        } catch (NoSuchAlgorithmException | CertificateException | IOException ex) {
            throw new GyroException(ex);
        }
    }

    private String getThumbprint(X509Certificate cert)
        throws NoSuchAlgorithmException, CertificateEncodingException {
        MessageDigest md = MessageDigest.getInstance("SHA-1");
        byte[] der = cert.getEncoded();
        md.update(der);
        String digestHex = Hex.encodeHexString(md.digest());
        return digestHex.toLowerCase();
    }

    @Override
    public List<ValidationError> validate(Set<String> configuredFields) {
        List<ValidationError> errors = new ArrayList<>();

        if (!getAutogenThumbprint() && getThumbPrints().isEmpty()) {
            errors.add(new ValidationError(this, null, "Either 'autogen-thumbprint' needs to be set to 'true' or 'thumb-prints' needs to be set."));
        }

        return errors;
    }

    private void tagOpenIdProvider(IamClient client) {
        client.tagOpenIDConnectProvider(r -> r.openIDConnectProviderArn(getArn())
            .tags(getTags().keySet()
                .stream()
                .map(o -> Tag.builder().key(o).value(getTags().get(o)).build())
                .collect(
                    Collectors.toList())));
    }
}
