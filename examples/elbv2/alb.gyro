aws::application-load-balancer alb-example
    name: "alb-example"
    ip-address-type: "ipv4"
    scheme: "internal"
    security-groups: [
        $(aws::security-group security-group),
        $(aws::security-group other-security-group)
    ]
    subnets: [
        $(aws::subnet subnet-us-east-2a),
        $(aws::subnet subnet-us-east-2b)
    ]
    tags: {
        Name: "alb-example"
    }
end

aws::vpc vpc
    cidr-block: "10.0.0.0/16"
    provide-ipv6-cidr-block: true

    tags: {
        Name: "alb-example"
    }
end

aws::internet-gateway internet-gateway
    vpc: $(aws::vpc vpc)
end

aws::subnet subnet-us-east-2a
    vpc: $(aws::vpc vpc)
    availability-zone: 'us-east-2a'
    cidr-block: '10.0.0.0/24'

    tags: {
        Name: "alb example us-east-2a"
    }
end

aws::subnet subnet-us-east-2b
    vpc: $(aws::vpc vpc)
    availability-zone: 'us-east-2b'
    cidr-block: '10.0.1.0/24'

    tags: {
        Name: "alb example us-east-2b"
    }
end

aws::security-group security-group
    group-name: "alb example - allow web traffic"
    vpc: $(aws::vpc vpc)
    description: "Allow web traffic only"
    keep-default-egress-rules: true

    @for port, type -in [80, 'http', 443, 'https']
        ingress
            description: "allow inbound $(type) traffic, ipv4 only"
            cidr-block: "0.0.0.0/0"
            protocol: "TCP"
            from-port: $(port)
            to-port: $(port)
        end
    @end
end

aws::security-group other-security-group
    group-name: "alb example - other - allow web traffic"
    vpc: $(aws::vpc vpc)
    description: "Allow web traffic only"
    keep-default-egress-rules: true

    @for port, type -in [80, 'http', 443, 'https']
        ingress
            description: "allow inbound $(type) traffic, ipv4 only"
            cidr-block: "0.0.0.0/0"
            protocol: "TCP"
            from-port: $(port)
            to-port: $(port)
        end
    @end
end

aws::load-balancer-target-group target-group-example
    name: "test-target-group"
    port: "80"
    protocol: "HTTP"
    target-type: "instance"
    vpc: $(aws::vpc vpc)

    health-check
        interval: "91"
        path: "/alb"
        port: "traffic-port"
        protocol: "HTTP"
        timeout: "32"
        healthy-threshold: "3"
        matcher: "200"
        unhealthy-threshold: "3"
    end

    tags: {
        Name: "alb-example-target-group"
    }
end

aws::application-load-balancer-listener listener-example
    port: "80"
    protocol: "HTTPS"
    alb: $(aws::application-load-balancer alb-example)
    default-certificate: "arn:aws:acm:us-east-2:242040583208:certificate/d3ca878d-fc0c-49ab-bdfa-a93dc2bcbda8"

    certificate
        arn: "arn:aws:acm:us-east-2:242040583208:certificate/3c4b2cf2-e1c2-4c7c-b3e9-49e0875694f3"
    end

    default-action
        type: "forward"
        target-group: $(aws::load-balancer-target-group target-group-example)
        order: 2
    end
end

aws::cognito-user-pool pool-example
    name: "user-pool-name"
    tags: {
        Name: "user-pool-example"
    }
end

aws::cognito-user-pool-client client-example
    allowed-o-auth-flows-client: true
    allowed-o-auth-flows: ["code"]
    allowed-o-auth-scopes: ["openid"]
    callback-urls: ["https://example.com/callback?code=AUTHORIZATION_CODE/"]
    generate-secret: true
    name: "clientname"
    user-pool: $(aws::cognito-user-pool pool-example)
end

aws::cognito-user-pool-domain domain-example
    domain: "domainexample"
    user-pool: $(aws::cognito-user-pool pool-example)
end

aws::application-load-balancer-listener-rule listener-rule-example
    alb-listener: $(aws::application-load-balancer-listener listener-example)
    priority: "1"

    action
        type: "fixed-response"
        order: 2

        fixed-response-action
            content-type: "text/plain"
            message-body: "Fixed response content"
            status-code: "200"
        end
    end
    action
        type: "authenticate-cognito"
        order: 1

        authenticate-cognito-action
            user-pool-arn: $(aws::cognito-user-pool pool-example).arn
            user-pool-client: $(aws::cognito-user-pool-client client-example)
            user-pool-domain: $(aws::cognito-user-pool-domain domain-example)
        end
    end

    condition
        field: "path-pattern"
        value: ["/pathpath"]
    end

    condition
        field: "host-header"
        value: ["www.example.net"]
    end
end
