aws::network-load-balancer nlb-example
    name: "nlb-example"
    ip-address-type: "ipv4"
    scheme: "internet-facing"

    subnet-mapping
        subnet: $(aws::subnet subnet-us-east-2a)
    end

    subnet-mapping
        subnet: $(aws::subnet subnet-us-east-2b)
    end

    tags: {
        Name: "nlb-example"
    }
end

aws::network-load-balancer-listener listener-example
    port: "80"
    protocol: "TCP"
    nlb: $(aws::network-load-balancer nlb-example)

    default-action
        target-group: $(aws::load-balancer-target-group target-group-example)
        type: "forward"
    end
end

aws::load-balancer-target-group target-group-example
    name: "test-target-group"
    port: "80"
    protocol: "TCP"
    target-type: "instance"
    vpc: $(aws::vpc vpc)

    health-check
        interval: "30"
        path: "/hi"
        port: "traffic-port"
        protocol: "HTTP"
        healthy-threshold: "3"
        unhealthy-threshold: "3"
    end

    tags: {
        Name: "nlb-example-target-group"
    }
end

aws::load-balancer-target target-ex-one
    id: $(aws::instance instance-us-east-2a).id
    port: "80"
    target-group: $(aws::load-balancer-target-group target-group-example)
end

aws::load-balancer-target target-ex-two
    id: $(aws::instance instance-us-east-2b).id
    port: "443"
    target-group: $(aws::load-balancer-target-group target-group-example)
end

aws::vpc vpc
    cidr-block: "10.0.0.0/16"
    provide-ipv6-cidr-block: true

    tags: {
        Name: "nlb-example"
    }
end

aws::internet-gateway internet-gateway
    vpc: $(aws::vpc vpc)
end

aws::subnet subnet-us-east-2a
    vpc: $(aws::vpc vpc)
    availability-zone: 'us-east-2a'
    cidr-block: '10.0.0.0/24'

    tags: {
        Name: "nlb example us-east-2a"
    }
end

aws::instance instance-us-east-2a
    ami: "amzn-ami-hvm-2018.03.0.20181129-x86_64-gp2"
    shutdown-behavior: "STOP"
    instance-type: "t2.micro"
    key: "jc-pair-example"
    subnet: $(aws::subnet "subnet-us-east-2a")
    security-groups: [
        $(aws::security-group security-group)
    ]
    disable-api-termination: false
    ebs-optimized: false
    source-dest-check: true

    tags: {
        Name: "nlb example - us-east-2a"
    }
end

aws::subnet subnet-us-east-2b
    vpc: $(aws::vpc vpc)
    availability-zone: 'us-east-2b'
    cidr-block: '10.0.1.0/24'

    tags: {
        Name: "nlb example us-east-2b"
    }
end

aws::instance instance-us-east-2b
    ami: "amzn-ami-hvm-2018.03.0.20181129-x86_64-gp2"
    shutdown-behavior: "STOP"
    instance-type: "t2.micro"
    key: "jc-pair-example"
    subnet: $(aws::subnet "subnet-us-east-2b")
    security-groups: [
        $(aws::security-group security-group)
    ]
    disable-api-termination: false
    ebs-optimized: false
    source-dest-check: true

    tags: {
        Name: "nlb example - us-east-2b"
    }
end

aws::security-group security-group
    name: "nlb example - allow web traffic"
    vpc: $(aws::vpc vpc)
    description: "Allow web traffic only"
    keep-default-egress-rules: true

    @for port, type -in [80, 'http', 443, 'https']
        ingress
            description: "allow inbound $(type) traffic, ipv4 only"
            cidr-block: "0.0.0.0/0"
            protocol: "TCP"
            from-port: $(port)
            to-port: $(port)
        end
    @end
end
