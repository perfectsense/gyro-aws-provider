aws::vpc vpc-auto-scaling-group-example
    cidr-block: "10.0.0.0/16"
    provide-ipv6-cidr-block: true

    tags: {
        Name: "vpc-auto-scaling-group-example"
    }
end

aws::internet-gateway internet-gateway-auto-scaling-group-example
    vpc: $(aws::vpc vpc-auto-scaling-group-example)
end

aws::subnet subnet-auto-scaling-group-example-1
    vpc: $(aws::vpc vpc-auto-scaling-group-example)
    availability-zone: "us-east-2a"
    cidr-block: "10.0.1.0/26"

    tags: {
        Name: "subnet-auto-scaling-group-example-1"
    }
end

aws::subnet subnet-auto-scaling-group-example-2
    vpc: $(aws::vpc vpc-auto-scaling-group-example)
    availability-zone: "us-east-2a"
    cidr-block: "10.0.2.0/26"

    tags: {
        Name: "subnet-auto-scaling-group-example-2"
    }
end

aws::security-group security-group-auto-scaling-group-example-1
    group-name: "security-group-auto-scaling-group-example-1"
    vpc: $(aws::vpc vpc-auto-scaling-group-example)
    description: "security group instance example 1"
    keep-default-egress-rules: true

    ingress
        description: "allow inbound http traffic, ipv4 only"
        cidr-blocks: ["0.0.0.0/0"]
        protocol: "TCP"
        from-port: 22
        to-port: 22
    end

    egress
        description: "allow outbound http traffic, ipv6 only"
        ipv6-cidr-blocks: ["::/0"]
        protocol: "TCP"
        from-port: 22
        to-port: 22
    end

    tags: {
        Name: "security-group-auto-scaling-group-example-1"
    }
end

aws::security-group security-group-auto-scaling-group-example-2
    group-name: "security-group-auto-scaling-group-example-2"
    vpc: $(aws::vpc vpc-auto-scaling-group-example)
    description: "security group instance example 2"
    keep-default-egress-rules: true

    ingress
        description: "allow inbound http traffic, ipv4 only"
        cidr-blocks: ["0.0.0.0/0"]
        protocol: "TCP"
        from-port: 22
        to-port: 22
    end

    egress
        description: "allow outbound http traffic, ipv6 only"
        ipv6-cidr-blocks: ["::/0"]
        protocol: "TCP"
        from-port: 22
        to-port: 22
    end

    tags: {
        Name: "security-group-auto-scaling-group-example-2"
    }
end

aws::launch-template launch-template-auto-scaling-group-example
    launch-template-name: "launch-template-gyro-1"
    ami-name: "amzn-ami-hvm-2018.03.0.20181129-x86_64-gp2"
    shutdown-behavior: "STOP"
    instance-type: "t2.micro"
    key-name: "example"
    security-groups: $(aws::security-group security-group-auto-scaling-group-example-*)
    disable-api-termination: false
    ebs-optimized: false

    tags: {
        Name: "launch-template-example-1"
    }
end

aws::instance instance-auto-scaling-group-example
    ami-name: "amzn-ami-hvm-2018.03.0.20181129-x86_64-gp2"
    shutdown-behavior: "STOP"
    instance-type: "t2.micro"
    key: "example"
    subnet: $(aws::subnet subnet-auto-scaling-group-example-1)
    security-groups: $(aws::security-group security-group-auto-scaling-group-example-*)
    disable-api-termination: false
    ebs-optimized: false
    source-dest-check: true

    tags: {
        Name: "instance-auto-scaling-group-example"
    }
end

aws::launch-configuration launch-configuration-auto-scaling-group-example
    launch-configuration-name: "launch-configuration-gyro-1"
    instance: $(aws::instance instance-auto-scaling-group-example)
end

aws::auto-scaling-group auto-scaling-group-example
    auto-scaling-group-name: "auto-scaling-group-example"
    launch-configuration: $(aws::launch-configuration launch-configuration-auto-scaling-group-example)
    availability-zones: $(aws::subnet subnet-auto-scaling-group-example-1).*.availability-zone
    subnets: $(aws::subnet subnet-auto-scaling-group-example-*)
    enable-metrics-collection: false
    tags: {
        Name: "auto-scaling-group-example",
        AutoTag: "propagated from auto-scaling-group-gyro-1"
    }
    propagate-at-launch-tags: [
        "AutoTag"
    ]

    scaling-policy
        policy-name: "Simple-Policy-1"
        adjustment-type: "ExactCapacity"
        policy-type: "SimpleScaling"
        cooldown: 3000
        scaling-adjustment: 5
    end

    scaling-policy
        policy-name: "Target-Tracking-Scaling-Policy-1"
        policy-type: "TargetTrackingScaling"
        estimated-instance-warmup: 50
        target-value: 25
        predefined-metric-type: "ASGAverageNetworkIn"
        disable-scale-in: false
    end

    lifecycle-hook
        lifecycle-hook-name: "Lifecycle-Hook-1"
        default-result: "CONTINUE"
        heartbeat-timeout: 300
        lifecycle-transition: "autoscaling:EC2_INSTANCE_LAUNCHING"
    end

    auto-scaling-notification
        topic: "arn:aws:sns:us-east-2:242040583208:beam-instance-state"
        notification-type: "autoscaling:EC2_INSTANCE_LAUNCH_ERROR"
    end

    termination-policies: [
        "Default"
    ]
end

workflow deploy
    for-type: aws::instance

    stage verify
        @create aws::instance verify-instance
            @extends $PENDING
        end

        @create aws::launch-configuration verify-launch-configuration
            @extends $(aws::launch-configuration * | instance = $CURRENT).0
            launch-configuration-name: "launch-configuration-gyro-\($(aws::instance verify-instance).instance-id)"
            instance: $(aws::instance verify-instance)
        end

        @create aws::auto-scaling-group verify-auto-scaling-group
            @extends $(aws::auto-scaling-group * | launch-configuration = $(aws::launch-configuration * | instance = $CURRENT)).0
            auto-scaling-group-name: "auto-scaling-group-gyro-\($(aws::instance verify-instance).instance-id)"
            launch-configuration: $(aws::launch-configuration verify-launch-configuration)
        end

        transition push
            to: pushed
            description: 'Push the new verification instances into the production load balancer and deregister old instances.'
        end

        transition reset
            to: finished
            description: 'Delete verification instances and load balancer, then exit Gyro.'
        end
    end

    stage pushed
        @swap aws::instance, $CURRENT, verify-instance
        @swap aws::launch-configuration, $(aws::launch-configuration * | instance = $CURRENT).0, verify-launch-configuration
        @swap aws::auto-scaling-group, $(aws::auto-scaling-group * | launch-configuration = $(aws::launch-configuration * | instance = $CURRENT)).0, verify-auto-scaling-group

        transition revert
            to: finished
            description: 'Revert the new verification instances into the production load balancer and deregister old instances.'
        end

        transition commit
            to: finished
            description: 'Commit verification instances to production load balancer.'
        end
    end

    stage finished
        @delete aws::instance, verify-instance
        @delete aws::launch-configuration, verify-launch-configuration
        @delete aws::auto-scaling-group, verify-auto-scaling-group
    end
end

