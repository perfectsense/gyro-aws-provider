
aws::load-balancer elb
    load-balancer-name: "elb"
    security-groups: [
        $(aws::security-group security-group)
    ]
    subnets: [
        $(aws::subnet subnet-us-east-2a)
    ]
    instances: [
        $(aws::instance instance-us-east-2a),
        $(aws::instance instance-us-east-2b)
    ]

    health-check
        healthy-threshold: "2"
        interval: "30"
        target: "HTTP:80/png"
        timeout: "3"
        unhealthy-threshold: "2"
    end

    listener
        instance-port: "80"
        instance-protocol: "HTTP"
        load-balancer-port: "80"
        protocol: "HTTP"
    end

    listener
        instance-port: "443"
        instance-protocol: "HTTP"
        load-balancer-port: "443"
        protocol: "HTTP"
    end
end

aws::vpc vpc
    cidr-block: "10.0.0.0/16"
    provide-ipv6-cidr-block: true

    tags: {
        Name: "elb-example"
    }
end

aws::subnet subnet-us-east-2a
    vpc: $(aws::vpc vpc)
    availability-zone: 'us-east-2a'
    cidr-block: '10.0.0.0/24'

    tags: {
        Name: "elb example us-east-2a"
    }
end

aws::instance instance-us-east-2a
    ami-name: "amzn-ami-hvm-2018.03.0.20181129-x86_64-gp2"
    shutdown-behavior: "STOP"
    instance-type: "t2.micro"
    key: "example"
    subnet: $(aws::subnet "subnet-us-east-2a")
    security-groups: [
        $(aws::security-group security-group)
    ]
    disable-api-termination: false
    ebs-optimized: false
    source-dest-check: true

    tags: {
        Name: "elb example - us-east-2a"
    }
end

aws::subnet subnet-us-east-2b
    vpc: $(aws::vpc vpc)
    availability-zone: 'us-east-2b'
    cidr-block: '10.0.1.0/24'

    tags: {
        Name: "elb example us-east-2b"
    }
end

aws::instance instance-us-east-2b
    ami-name: "amzn-ami-hvm-2018.03.0.20181129-x86_64-gp2"
    shutdown-behavior: "STOP"
    instance-type: "t2.micro"
    key: "example"
    subnet: $(aws::subnet "subnet-us-east-2b")
    security-groups: [
        $(aws::security-group security-group)
    ]
    disable-api-termination: false
    ebs-optimized: false
    source-dest-check: true

    tags: {
        Name: "elb example - us-east-2b"
    }
end

aws::security-group security-group
    group-name: "elb example - allow web traffic"
    vpc: $(aws::vpc vpc)
    description: "Allow web traffic only"
    keep-default-egress-rules: true

    @for port, type -in [80, 'http', 443, 'https']
        ingress
            description: "allow inbound $(type) traffic, ipv4 only"
            cidr-blocks: ["0.0.0.0/0"]
            protocol: "TCP"
            from-port: $(port)
            to-port: $(port)
        end
    @end
end

aws::internet-gateway internet-gateway
    vpc: $(aws::vpc vpc)
end
