aws::regex-pattern-set regex-pattern-set-match-set-example-waf
    name: "regex-pattern-set-match-set-example-waf"

    patterns: [
        "pattern1",
        "pattern2"
    ]
end

aws::regex-match-set regex-match-set-example-waf
    name: "regex-match-set-example-waf"
    regex-match-tuple
        type: "METHOD"
        text-transformation: "NONE"
        regex-pattern-set: $(aws::regex-pattern-set regex-pattern-set-match-set-example-waf)
    end
end

aws::geo-match-set geo-match-set-example-waf
    name: "geo-match-set-example-waf"

    geo-match-constraint
        type: "Country"
        value: "TL"
    end
end

aws::xss-match-set xss-match-set-example-waf
    name: "xss-match-set-example-waf"

    xss-match-tuple
        type: "METHOD"
        text-transformation: "NONE"
    end
end

aws::size-constraint-set size-constraint-set-example-waf
    name: "size-constraint-set-example-waf"

    size-constraint
        type: "METHOD"
        text-transformation: "NONE"
        comparison-operator: "EQ"
        size: 10
    end
end

aws::ip-set ip-set-example-waf
    name: "ip-set-example-waf"

    ip-set-descriptor
        type: "IPV4"
        value: "190.0.0.26/32"
    end
end

aws::byte-match-set byte-match-set-example-waf
    name: "byte-match-set-example-waf"

    byte-match-tuple
        type: "METHOD"
        text-transformation: "NONE"
        positional-constraint: "CONTAINS"
        target-string: "target-string"
    end
end

aws::sql-injection-match-set sql-injection-match-set-example-waf
    name: "sql-injection-match-set-example-waf"

    sql-injection-match-tuple
        type: "METHOD"
        text-transformation: "NONE"
    end
end

aws::rule rule-example-waf
    name: "rule-example-waf"
    metric-name: "ruleExampleWaf"

    predicate
        condition: $(aws::regex-match-set regex-match-set-example-waf)
        negated: false
    end

    predicate
        condition: $(aws::geo-match-set geo-match-set-example-waf)
        negated: false
    end

    predicate
        condition: $(aws::xss-match-set xss-match-set-example-waf)
        negated: false
    end

    predicate
        condition: $(aws::size-constraint-set size-constraint-set-example-waf)
        negated: false
    end

    predicate
        condition: $(aws::ip-set ip-set-example-waf)
        negated: false
    end

    predicate
        condition: $(aws::byte-match-set byte-match-set-example-waf)
        negated: false
    end

    predicate
        condition: $(aws::sql-injection-match-set sql-injection-match-set-example-waf)
        negated: false
    end
end

aws::rate-rule rate-rule-example-waf
    name: "rate-rule-example-waf"
    metric-name: "rateRuleExampleWaf"
    rate-key: "IP"
    rate-limit: 2000

    predicate
        condition: $(aws::regex-match-set regex-match-set-example-waf)
        negated: false
    end

    predicate
        condition: $(aws::geo-match-set geo-match-set-example-waf)
        negated: false
    end

    predicate
        condition: $(aws::xss-match-set xss-match-set-example-waf)
        negated: false
    end

    predicate
        condition: $(aws::size-constraint-set size-constraint-set-example-waf)
        negated: false
    end

    predicate
        condition: $(aws::ip-set ip-set-example-waf)
        negated: false
    end

    predicate
        condition: $(aws::byte-match-set byte-match-set-example-waf)
        negated: false
    end

    predicate
        condition: $(aws::sql-injection-match-set sql-injection-match-set-example-waf)
        negated: false
    end
end

aws::waf-acl waf-acl-example
    name: "waf-acl-example"
    metric-name: "wafAclExample"
    default-action
        type: "ALLOW"
    end

    rule
        action
            type: "ALLOW"
        end
        priority: 1
        rule: $(aws::rule rule-example-waf)
    end

    rule
        action
            type: "ALLOW"
        end
        priority: 2
        rule: $(aws::rate-rule rate-rule-example-waf)
    end
end
