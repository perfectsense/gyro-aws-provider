import ../init as _

aws::vpc vpc
    cidr-block: "10.0.0.0/16"
    provide-ipv6-cidr-block: true

    tags: {
        Name: "instance example"
     }
end

aws::internet-gateway internet-gateway
    vpc-id: $(aws::vpc vpc | vpc-id)
end

aws::subnet subnet
    vpc-id: $(aws::vpc vpc | vpc-id)
    availability-zone: "us-east-2a"
    cidr-block: "10.0.0.0/16"
    map-public-ip-on-launch: true
    depends-on: ["aws::internet-gateway internet-gateway"]

    tags: {
        Name: "instance example"
    }
end

aws::security-group security-group
    group-name: "instance-example"
    vpc-id: $(aws::vpc vpc | vpc-id)
    description: "instance example"
    keep-default-egress-rules: true

    ingress
        description: "allow inbound ssh traffic, ipv4 only"
        cidr-blocks: ["0.0.0.0/0"]
        protocol: "TCP"
        from-port: 22
        to-port: 22
    end

    tags: {
        Name: "instance example"
    }
end

aws::instance instance-example
    ami-name: "amzn-ami-hvm-2018.03.0.20181129-x86_64-gp2"
    shutdown-behavior: "STOP"
    instance-type: "t2.micro"
    subnet-id: $(aws::subnet subnet | subnet-id)
    security-group-ids: [
        $(aws::security-group security-group| group-id)
    ]
    disable-api-termination: false
    enable-ena-support: true
    ebs-optimized: false
    source-dest-check: true

    tags: {
        Name: "instance-example"
    }

    capacity-reservation: "none"
end


aws::load-balancer elb
    load-balancer-name: "elb"
    security-groups: [
        $(aws::security-group security-group | group-id)
    ]
    subnets: [
        $(aws::subnet subnet | subnet-id)
    ]
    instances: [
        $(aws::instance instance-example | instance-id)
    ]

    health-check
        healthy-threshold: "2"
        interval: "30"
        target: "HTTP:80/png"
        timeout: "3"
        unhealthy-threshold: "2"
    end

    listener
        instance-port: "80"
        instance-protocol: "HTTP"
        load-balancer-port: "80"
        protocol: "HTTP"
    end

    listener
        instance-port: "443"
        instance-protocol: "HTTP"
        load-balancer-port: "443"
        protocol: "HTTP"
    end
end

aws::vpc vpc2
    cidr-block: "10.0.0.0/16"
    provide-ipv6-cidr-block: true

    tags: {
        Name: "instance example"
     }
end

aws::subnet subnet2
    vpc-id: $(aws::vpc vpc2 | vpc-id)
    availability-zone: "us-east-2b"
    cidr-block: "10.0.0.0/16"
    map-public-ip-on-launch: true
    depends-on: ["aws::internet-gateway internet-gateway"]

    tags: {
        Name: "instance example"
    }
end

aws::security-group security-group2
    group-name: "instance-example2"
    vpc-id: $(aws::vpc vpc2 | vpc-id)
    description: "instance example2"
    keep-default-egress-rules: true

    ingress
        description: "allow inbound ssh traffic, ipv4 only"
        cidr-blocks: ["0.0.0.0/0"]
        protocol: "TCP"
        from-port: 22
        to-port: 22
    end

    tags: {
        Name: "instance example"
    }
end

aws::instance instance-example2
    ami-name: "amzn-ami-hvm-2018.03.0.20181129-x86_64-gp2"
    shutdown-behavior: "STOP"
    instance-type: "t2.micro"
    subnet-id: $(aws::subnet subnet2 | subnet-id)
    security-group-ids: [
        $(aws::security-group security-group2| group-id)
    ]
    disable-api-termination: false
    enable-ena-support: true
    ebs-optimized: false
    source-dest-check: true

    tags: {
        Name: "instance-example"
    }

    capacity-reservation: "none"
end
