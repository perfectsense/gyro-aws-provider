aws::vpc vpc-example-for-endpoint
    cidr-block: "10.0.0.0/16"

    tags: {
        Name: "vpc-example-for-endpoint"
    }
end

aws::subnet subnet-public-us-east-2a-example-for-endpoint-1
    vpc: $(aws::vpc vpc-example-for-endpoint)
    cidr-block: "10.0.0.0/26"
    availability-zone: "us-east-2a"

    tags: {
        Name: "subnet-public-us-east-2a-example-for-endpoint-1"
    }
end

aws::subnet subnet-public-us-east-2a-example-for-endpoint-2
    vpc: $(aws::vpc vpc-example-for-endpoint)
    cidr-block: "10.0.3.0/26"
    availability-zone: "us-east-2a"

    tags: {
        Name: "subnet-public-us-east-2a-example-for-endpoint-2"
    }
end

aws::subnet subnet-public-us-east-2a-example-for-endpoint-3
    vpc: $(aws::vpc vpc-example-for-endpoint)
    cidr-block: "10.0.6.0/26"
    availability-zone: "us-east-2a"

    tags: {
        Name: "subnet-public-us-east-2a-example-for-endpoint-3"
    }
end

aws::subnet subnet-public-us-east-2b-example-for-endpoint-1
    vpc: $(aws::vpc vpc-example-for-endpoint)
    cidr-block: "10.0.1.0/26"
    availability-zone: "us-east-2b"

    tags: {
        Name: "subnet-public-us-east-2b-example-for-endpoint-1"
    }
end

aws::subnet subnet-public-us-east-2b-example-for-endpoint-2
    vpc: $(aws::vpc vpc-example-for-endpoint)
    cidr-block: "10.0.4.0/26"
    availability-zone: "us-east-2b"

    tags: {
        Name: "subnet-public-us-east-2b-example-for-endpoint-2"
    }
end

aws::subnet subnet-public-us-east-2b-example-for-endpoint-3
    vpc: $(aws::vpc vpc-example-for-endpoint)
    cidr-block: "10.0.7.0/26"
    availability-zone: "us-east-2b"

    tags: {
        Name: "subnet-public-us-east-2b-example-for-endpoint-3"
    }
end

aws::subnet subnet-public-us-east-2c-example-for-endpoint-1
    vpc: $(aws::vpc vpc-example-for-endpoint)
    cidr-block: "10.0.2.0/26"
    availability-zone: "us-east-2c"

    tags: {
        Name: "subnet-public-us-east-2c-example-for-endpoint-1"
    }
end

aws::subnet subnet-public-us-east-2c-example-for-endpoint-2
    vpc: $(aws::vpc vpc-example-for-endpoint)
    cidr-block: "10.0.5.0/26"
    availability-zone: "us-east-2c"

    tags: {
        Name: "subnet-public-us-east-2c-example-for-endpoint-2"
    }
end

aws::subnet subnet-public-us-east-2c-example-for-endpoint-3
    vpc: $(aws::vpc vpc-example-for-endpoint)
    cidr-block: "10.0.8.0/26"
    availability-zone: "us-east-2c"

    tags: {
        Name: "subnet-public-us-east-2c-example-for-endpoint-3"
    }
end

aws::route-table route-table-example-for-endpoint-1
    vpc: $(aws::vpc vpc-example-for-endpoint)
    subnets: [
        $(aws::subnet subnet-public-us-east-2a-example-for-endpoint-1),
        $(aws::subnet subnet-public-us-east-2b-example-for-endpoint-1),
        $(aws::subnet subnet-public-us-east-2c-example-for-endpoint-1)
    ]

    tags: {
        Name: "route-table-example-for-endpoint-1"
    }
end

aws::route-table route-table-example-for-endpoint-2
    vpc: $(aws::vpc vpc-example-for-endpoint)

    subnets: [
        $(aws::subnet subnet-public-us-east-2a-example-for-endpoint-2),
        $(aws::subnet subnet-public-us-east-2b-example-for-endpoint-2),
        $(aws::subnet subnet-public-us-east-2c-example-for-endpoint-2)
    ]

    tags: {
        Name: "route-table-example-for-endpoint-2"
    }
end

aws::route-table route-table-example-for-endpoint-3
    vpc: $(aws::vpc vpc-example-for-endpoint)

    subnets: [
        $(aws::subnet subnet-public-us-east-2a-example-for-endpoint-3),
        $(aws::subnet subnet-public-us-east-2b-example-for-endpoint-3),
        $(aws::subnet subnet-public-us-east-2c-example-for-endpoint-3)
    ]

    tags: {
        Name: "route-table-example-for-endpoint-3"
    }
end

aws::security-group security-group-example-for-endpoint-1
    name: "$(project) $(environment) - Allow web traffic only example-for-endpoint-1"
    vpc: $(aws::vpc vpc-example-for-endpoint)
    description: "Allow web traffic only"
end

aws::security-group-rules security-group-example-for-endpoint-1-rules
    security-group: $(aws::security-group security-group-example-for-endpoint-1)
    keep-default-egress-rules: true

    @for port, type -in [80, 'http', 443, 'https']
        ingress
            description: "allow inbound $(type) traffic, ipv4 only"
            cidr-block: "0.0.0.0/0"
            protocol: "TCP"
            from-port: $(port)
            to-port: $(port)
        end
    @end

    egress
        description: "allow outbound http traffic, ipv6 only"
        ipv6-cidr-block: "::/0"
        protocol: "TCP"
        from-port: 80
        to-port: 80
    end
end

aws::security-group security-group-example-for-endpoint-2
    name: "$(project) $(environment) - Allow web traffic only example-for-endpoint-2"
    vpc: $(aws::vpc vpc-example-for-endpoint)
    description: "Allow web traffic only"
end

aws::security-group-rules security-group-example-for-endpoint-2-rules
    security-group: $(aws::security-group security-group-example-for-endpoint-2)
    keep-default-egress-rules: true

    @for port, type -in [80, 'http', 443, 'https']
        ingress
            description: "allow inbound $(type) traffic, ipv4 only"
            cidr-block: "0.0.0.0/0"
            protocol: "TCP"
            from-port: $(port)
            to-port: $(port)
        end
    @end

    egress
        description: "allow outbound http traffic, ipv6 only"
        ipv6-cidr-block: "::/0"
        protocol: "TCP"
        from-port: 80
        to-port: 80
    end
end

aws::security-group security-group-example-for-endpoint-3
    name: "$(project) $(environment) - Allow web traffic only example-for-endpoint-3"
    vpc: $(aws::vpc vpc-example-for-endpoint)
    description: "Allow web traffic only"
end

aws::security-group-rules security-group-example-for-endpoint-3-rules
    security-group: $(aws::security-group security-group-example-for-endpoint-3)
    keep-default-egress-rules: true

    @for port, type -in [80, 'http', 443, 'https']
        ingress
            description: "allow inbound $(type) traffic, ipv4 only"
            cidr-block: "0.0.0.0/0"
            protocol: "TCP"
            from-port: $(port)
            to-port: $(port)
        end
    @end

    egress
        description: "allow outbound http traffic, ipv6 only"
        ipv6-cidr-block: "::/0"
        protocol: "TCP"
        from-port: 80
        to-port: 80
    end
end

aws::vpc-endpoint endpoint-example-gateway
    vpc: $(aws::vpc vpc-example-for-endpoint)
    service-name: 'com.amazonaws.us-east-2.s3'
    policy: 'endpoint-policy-1.json'
    type: 'Gateway'

    route-tables: [
        $(aws::route-table route-table-example-for-endpoint-1),
        $(aws::route-table route-table-example-for-endpoint-2),
        $(aws::route-table route-table-example-for-endpoint-3)
    ]

    tags: {
        Name: "endpoint-example-gateway"
    }
end

aws::vpc-endpoint endpoint-example-interface
    vpc: $(aws::vpc vpc-example-for-endpoint)
    service-name: 'com.amazonaws.us-east-2.ec2'
    policy: 'endpoint-policy-2.json'
    type: 'Interface'

    subnets: [
        $(aws::subnet subnet-public-us-east-2a-example-for-endpoint-1),
        $(aws::subnet subnet-public-us-east-2b-example-for-endpoint-1),
        $(aws::subnet subnet-public-us-east-2c-example-for-endpoint-1)
    ]
    security-groups: [
        $(aws::security-group security-group-example-for-endpoint-1),
        $(aws::security-group security-group-example-for-endpoint-2),
        $(aws::security-group security-group-example-for-endpoint-3)
    ]

    tags: {
        Name: "endpoint-example-interface"
    }
end
