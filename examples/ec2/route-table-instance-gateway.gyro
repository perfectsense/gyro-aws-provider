aws::vpc vpc
    cidr-block: "10.0.0.0/16"
    provide-ipv6-cidr-block: true

    tags: {
        Name: "instance example"
     }
end

aws::subnet subnet
    vpc: $(aws::vpc vpc)
    availability-zone: "us-east-2a"
    cidr-block: "10.0.0.0/16"
    map-public-ip-on-launch: true

    tags: {
        Name: "instance example"
    }
end

aws::security-group security-group
    name: "instance-example"
    vpc: $(aws::vpc vpc)
    description: "instance example"
    keep-default-egress-rules: true

    ingress
        description: "allow inbound ssh traffic, ipv4 only"
        cidr-block: "0.0.0.0/0"
        protocol: "TCP"
        from-port: 22
        to-port: 22
    end

    tags: {
        Name: "instance example"
    }
end

workflow 'replace-gateway'
    for-type: 'aws::instance'

    stage 'create-temp-gateway'
        create
            aws::instance "$(NAME)-temp"
                _extends: $(PENDING)
            end
        end
    end

    stage 'swap-gateways'
        swap
            type: 'aws::instance'
            x: "$(NAME)"
            y: "$(NAME)-temp"
        end
    end
end

aws::instance instance-example
    ami: $(external-query aws::ami { name: "amzn-ami-hvm-2018.03.0.20181129-x86_64-gp2" }).0.id
    shutdown-behavior: "STOP"
    instance-type: "t2.micro"
    key: "example"
    subnet-id: $(aws::subnet subnet).id
    security-group-ids: $(aws::security-group security-group).*.id
    disable-api-termination: false
    ebs-optimized: false
    source-dest-check: true

    tags: {
        Name: "instance-example"
    }

    capacity-reservation: "none"
end

aws::route-table route-table-example
    vpc: $(aws::vpc vpc)
    subnets: [
        $(aws::subnet subnet)
    ]

    route
        destination-cidr-block: "0.0.0.0/0"
        instance: $(aws::instance instance-example)
    end

    tags: {
        Name: "route-table-example"
    }
end