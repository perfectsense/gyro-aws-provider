import ../init as _

aws::vpc vpc-example-for-endpoint
    cidr-block: "10.0.0.0/16"

    tags: {
        Name: "vpc-example-for-endpoint"
    }
end

aws::subnet subnet-public-us-east-2a-example-for-endpoint-1
    vpc-id: $(aws::vpc vpc-example-for-endpoint | vpc-id)
    cidr-block: "10.0.0.0/26"
    availability-zone: "us-east-2a"

    tags: {
        Name: "subnet-public-us-east-2a-example-for-endpoint-1"
    }
end

aws::subnet subnet-public-us-east-2a-example-for-endpoint-2
    vpc-id: $(aws::vpc vpc-example-for-endpoint | vpc-id)
    cidr-block: "10.0.3.0/26"
    availability-zone: "us-east-2a"

    tags: {
        Name: "subnet-public-us-east-2a-example-for-endpoint-2"
    }
end

aws::subnet subnet-public-us-east-2a-example-for-endpoint-3
    vpc-id: $(aws::vpc vpc-example-for-endpoint | vpc-id)
    cidr-block: "10.0.6.0/26"
    availability-zone: "us-east-2a"

    tags: {
        Name: "subnet-public-us-east-2a-example-for-endpoint-3"
    }
end

aws::subnet subnet-public-us-east-2b-example-for-endpoint-1
    vpc-id: $(aws::vpc vpc-example-for-endpoint | vpc-id)
    cidr-block: "10.0.1.0/26"
    availability-zone: "us-east-2b"

    tags: {
        Name: "subnet-public-us-east-2b-example-for-endpoint-1"
    }
end

aws::subnet subnet-public-us-east-2b-example-for-endpoint-2
    vpc-id: $(aws::vpc vpc-example-for-endpoint | vpc-id)
    cidr-block: "10.0.4.0/26"
    availability-zone: "us-east-2b"

    tags: {
        Name: "subnet-public-us-east-2b-example-for-endpoint-2"
    }
end

aws::subnet subnet-public-us-east-2b-example-for-endpoint-3
    vpc-id: $(aws::vpc vpc-example-for-endpoint | vpc-id)
    cidr-block: "10.0.7.0/26"
    availability-zone: "us-east-2b"

    tags: {
        Name: "subnet-public-us-east-2b-example-for-endpoint-3"
    }
end

aws::subnet subnet-public-us-east-2c-example-for-endpoint-1
    vpc-id: $(aws::vpc vpc-example-for-endpoint | vpc-id)
    cidr-block: "10.0.2.0/26"
    availability-zone: "us-east-2c"

    tags: {
        Name: "subnet-public-us-east-2c-example-for-endpoint-1"
    }
end

aws::subnet subnet-public-us-east-2c-example-for-endpoint-2
    vpc-id: $(aws::vpc vpc-example-for-endpoint | vpc-id)
    cidr-block: "10.0.5.0/26"
    availability-zone: "us-east-2c"

    tags: {
        Name: "subnet-public-us-east-2c-example-for-endpoint-2"
    }
end

aws::subnet subnet-public-us-east-2c-example-for-endpoint-3
    vpc-id: $(aws::vpc vpc-example-for-endpoint | vpc-id)
    cidr-block: "10.0.8.0/26"
    availability-zone: "us-east-2c"

    tags: {
        Name: "subnet-public-us-east-2c-example-for-endpoint-3"
    }
end

aws::route-table route-table-example-for-endpoint-1
    vpc-id: $(aws::vpc vpc-example-for-endpoint | vpc-id)
    subnet-ids: [
        $(aws::subnet subnet-public-us-east-2a-example-for-endpoint-1 | subnet-id),
        $(aws::subnet subnet-public-us-east-2b-example-for-endpoint-1 | subnet-id),
        $(aws::subnet subnet-public-us-east-2c-example-for-endpoint-1 | subnet-id)
    ]

    tags: {
        Name: "route-table-example-for-endpoint-1"
    }
end

aws::route-table route-table-example-for-endpoint-2
    vpc-id: $(aws::vpc vpc-example-for-endpoint | vpc-id)
    subnet-ids: [
        $(aws::subnet subnet-public-us-east-2a-example-for-endpoint-2 | subnet-id),
        $(aws::subnet subnet-public-us-east-2b-example-for-endpoint-2 | subnet-id),
        $(aws::subnet subnet-public-us-east-2c-example-for-endpoint-2 | subnet-id)
    ]

    tags: {
        Name: "route-table-example-for-endpoint-2"
    }
end

aws::route-table route-table-example-for-endpoint-3
    vpc-id: $(aws::vpc vpc-example-for-endpoint | vpc-id)
    subnet-ids: [
        $(aws::subnet subnet-public-us-east-2a-example-for-endpoint-3 | subnet-id),
        $(aws::subnet subnet-public-us-east-2b-example-for-endpoint-3 | subnet-id),
        $(aws::subnet subnet-public-us-east-2c-example-for-endpoint-3 | subnet-id)
    ]

    tags: {
        Name: "route-table-example-for-endpoint-3"
    }
end

aws::security-group security-group-example-for-endpoint-1
    group-name: "$(project) $(environment) - Allow web traffic only example-for-endpoint-1"
    vpc-id: $(aws::vpc vpc-example-for-endpoint | vpc-id)
    description: "Allow web traffic only"
    keep-default-egress-rules: true

    for port, type in [80, 'http', 443, 'https']
        ingress
            description: "allow inbound $(type) traffic, ipv4 only"
            cidr-blocks: ["0.0.0.0/0"]
            protocol: "TCP"
            from-port: $(port)
            to-port: $(port)
        end
    end

    egress
        description: "allow outbound http traffic, ipv6 only"
        ipv6-cidr-blocks: ["::/0"]
        protocol: "TCP"
        from-port: 80
        to-port: 80
    end
end

aws::security-group security-group-example-for-endpoint-2
    group-name: "$(project) $(environment) - Allow web traffic only example-for-endpoint-2"
    vpc-id: $(aws::vpc vpc-example-for-endpoint | vpc-id)
    description: "Allow web traffic only"
    keep-default-egress-rules: true

    for port, type in [80, 'http', 443, 'https']
        ingress
            description: "allow inbound $(type) traffic, ipv4 only"
            cidr-blocks: ["0.0.0.0/0"]
            protocol: "TCP"
            from-port: $(port)
            to-port: $(port)
        end
    end

    egress
        description: "allow outbound http traffic, ipv6 only"
        ipv6-cidr-blocks: ["::/0"]
        protocol: "TCP"
        from-port: 80
        to-port: 80
    end
end

aws::security-group security-group-example-for-endpoint-3
    group-name: "$(project) $(environment) - Allow web traffic only example-for-endpoint-3"
    vpc-id: $(aws::vpc vpc-example-for-endpoint | vpc-id)
    description: "Allow web traffic only"
    keep-default-egress-rules: true

    for port, type in [80, 'http', 443, 'https']
        ingress
            description: "allow inbound $(type) traffic, ipv4 only"
            cidr-blocks: ["0.0.0.0/0"]
            protocol: "TCP"
            from-port: $(port)
            to-port: $(port)
        end
    end

    egress
        description: "allow outbound http traffic, ipv6 only"
        ipv6-cidr-blocks: ["::/0"]
        protocol: "TCP"
        from-port: 80
        to-port: 80
    end
end

aws::endpoint endpoint-example-gateway
    vpc-id: $(aws::vpc vpc-example-for-endpoint | vpc-id)
    service-name: 'com.amazonaws.us-east-2.s3'
    policy-doc-path: 'policy.json'
    type-interface: false
    route-table-ids: [
        $(aws::route-table route-table-example-for-endpoint-1 | route-table-id),
        $(aws::route-table route-table-example-for-endpoint-2 | route-table-id),
        $(aws::route-table route-table-example-for-endpoint-3 | route-table-id)
    ]
end

aws::endpoint endpoint-example-interface
    vpc-id: $(aws::vpc vpc-example-for-endpoint | vpc-id)
    service-name: 'com.amazonaws.us-east-2.ec2'
    policy-doc-path: 'policy.json'
    type-interface: true
    subnet-ids: [
        $(aws::subnet subnet-public-us-east-2a-example-for-endpoint-1 | subnet-id),
        $(aws::subnet subnet-public-us-east-2b-example-for-endpoint-1 | subnet-id),
        $(aws::subnet subnet-public-us-east-2c-example-for-endpoint-1 | subnet-id)
    ]
    security-group-ids: [
        $(aws::security-group security-group-example-for-endpoint-1 | group-id),
        $(aws::security-group security-group-example-for-endpoint-2 | group-id),
        $(aws::security-group security-group-example-for-endpoint-3 | group-id)
    ]
end