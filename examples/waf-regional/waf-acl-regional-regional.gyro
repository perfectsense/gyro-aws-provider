aws::regex-pattern-set-regional regex-pattern-set-match-set-example-waf
    name: "regex-pattern-set-match-set-example-waf"

    patterns: [
        "pattern1",
        "pattern2"
    ]
end

aws::regex-match-set-regional regex-match-set-example-waf
    name: "regex-match-set-example-waf"
    regex-match-tuple
        type: "METHOD"
        text-transformation: "NONE"
        regex-pattern-set-id: $(aws::regex-pattern-set-regional regex-pattern-set-match-set-example-waf | regex-pattern-set-id)
    end
end

aws::geo-match-set-regional geo-match-set-example-waf
    name: "geo-match-set-example-waf"

    geo-match-constraint
        type: "Country"
        value: "TL"
    end
end

aws::xss-match-set-regional xss-match-set-example-waf
    name: "xss-match-set-example-waf"

    xss-match-tuple
        type: "METHOD"
        text-transformation: "NONE"
    end
end

aws::size-constraint-set-regional size-constraint-set-example-waf
    name: "size-constraint-set-example-waf"

    size-constraint
        type: "METHOD"
        text-transformation: "NONE"
        comparison-operator: "EQ"
        size: 10
    end
end

aws::ip-set-regional ip-set-example-waf
    name: "ip-set-example-waf"

    ip-set-descriptor
        type: "IPV4"
        value: "190.0.0.26/32"
    end
end

aws::byte-match-set-regional byte-match-set-example-waf
    name: "byte-match-set-example-waf"

    byte-match-tuple
        type: "METHOD"
        text-transformation: "NONE"
        positional-constraint: "CONTAINS"
        target-string: "target-string"
    end
end

aws::sql-injection-match-set-regional sql-injection-match-set-example-waf
    name: "sql-injection-match-set-example-waf"

    sql-injection-match-tuple
        type: "METHOD"
        text-transformation: "NONE"
    end
end

aws::rule-regional rule-example-waf
    name: "rule-example-waf"
    metric-name: "ruleExampleWaf"

    predicate
        data-id:$(aws::regex-match-set-regional regex-match-set-example-waf | regex-match-set-id)
        type: "RegexMatch"
        negated: false
    end

    predicate
        data-id:$(aws::geo-match-set-regional geo-match-set-example-waf | geo-match-set-id)
        type: "GeoMatch"
        negated: false
    end

    predicate
        data-id:$(aws::xss-match-set-regional xss-match-set-example-waf | xss-match-set-id)
        type: "XssMatch"
        negated: false
    end

    predicate
        data-id:$(aws::size-constraint-set-regional size-constraint-set-example-waf | size-constraint-set-id)
        type: "SizeConstraint"
        negated: false
    end

    predicate
        data-id:$(aws::ip-set-regional ip-set-example-waf | ip-set-id)
        type: "IPMatch"
        negated: false
    end

    predicate
        data-id:$(aws::byte-match-set-regional byte-match-set-example-waf | byte-match-set-id)
        type: "ByteMatch"
        negated: false
    end

    predicate
        data-id: $(aws::sql-injection-match-set-regional sql-injection-match-set-example-waf | sql-injection-match-set-id)
        type: "SqlInjectionMatch"
        negated: false
    end
end

aws::rate-rule-regional rate-rule-example-waf
    name: "rate-rule-example-waf"
    metric-name: "rateRuleExampleWaf"
    rate-key: "IP"
    rate-limit: 2000

    predicate
        data-id:$(aws::regex-match-set-regional regex-match-set-example-waf | regex-match-set-id)
        type: "RegexMatch"
        negated: false
    end

    predicate
        data-id:$(aws::geo-match-set-regional geo-match-set-example-waf | geo-match-set-id)
        type: "GeoMatch"
        negated: false
    end

    predicate
        data-id:$(aws::xss-match-set-regional xss-match-set-example-waf | xss-match-set-id)
        type: "XssMatch"
        negated: false
    end

    predicate
        data-id:$(aws::size-constraint-set-regional size-constraint-set-example-waf | size-constraint-set-id)
        type: "SizeConstraint"
        negated: false
    end

    predicate
        data-id:$(aws::ip-set-regional ip-set-example-waf | ip-set-id)
        type: "IPMatch"
        negated: false
    end

    predicate
        data-id:$(aws::byte-match-set-regional byte-match-set-example-waf | byte-match-set-id)
        type: "ByteMatch"
        negated: false
    end

    predicate
        data-id: $(aws::sql-injection-match-set-regional sql-injection-match-set-example-waf | sql-injection-match-set-id)
        type: "SqlInjectionMatch"
        negated: false
    end
end

aws::waf-acl-regional waf-acl-example
    name: "waf-acl-example"
    metric-name: "wafAclExample"
    default-action: "ALLOW"

    activated-rule
        action: "ALLOW"
        type: "REGULAR"
        priority: 1
        rule-id: $(aws::rule-regional rule-example-waf | rule-id)
    end

    activated-rule
        action: "ALLOW"
        type: "RATE_BASED"
        priority: 2
        rule-id: $(aws::rate-rule-regional rate-rule-example-waf | rule-id)
    end
end
